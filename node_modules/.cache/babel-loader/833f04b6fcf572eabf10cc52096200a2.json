{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _layoutText = _interopRequireDefault(require(\"../text/layoutText\"));\n\nvar isType = R.propEq('type');\nvar isSvg = isType(P.Svg);\nvar isText = isType(P.Text);\nvar isNotSvg = R.complement(isSvg);\n\nvar shouldLayoutText = function shouldLayoutText(node) {\n  return isText(node) && !node.lines;\n};\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */\n\n\nvar resolveTextLayout = function resolveTextLayout(node, fontStore) {\n  var mapChild = function mapChild(child) {\n    return resolveTextLayout(child, fontStore);\n  };\n\n  return R.compose(R.evolve({\n    children: R.map(R.when(isNotSvg, mapChild))\n  }), R.when(shouldLayoutText, R.compose(R.converge(R.assoc('lines'), [R.converge(_layoutText.default, [R.identity, R.path(['box', 'width']), R.path(['box', 'height']), R.always(fontStore)]), R.identity]))))(node);\n};\n\nvar _default = resolveTextLayout;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Viraj/Desktop/task 26/numetry-task-26/node_modules/@react-pdf/layout/lib/steps/resolveTextLayout.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","P","_layoutText","isType","propEq","isSvg","Svg","isText","Text","isNotSvg","complement","shouldLayoutText","node","lines","resolveTextLayout","fontStore","mapChild","child","compose","evolve","children","map","when","converge","assoc","identity","path","always","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGJ,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIM,CAAC,GAAGL,uBAAuB,CAACD,OAAO,CAAC,uBAAD,CAAR,CAA/B;;AAEA,IAAIO,WAAW,GAAGR,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAxC;;AAEA,IAAIQ,MAAM,GAAGH,CAAC,CAACI,MAAF,CAAS,MAAT,CAAb;AACA,IAAIC,KAAK,GAAGF,MAAM,CAACF,CAAC,CAACK,GAAH,CAAlB;AACA,IAAIC,MAAM,GAAGJ,MAAM,CAACF,CAAC,CAACO,IAAH,CAAnB;AACA,IAAIC,QAAQ,GAAGT,CAAC,CAACU,UAAF,CAAaL,KAAb,CAAf;;AAEA,IAAIM,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AACrD,SAAOL,MAAM,CAACK,IAAD,CAAN,IAAgB,CAACA,IAAI,CAACC,KAA7B;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BF,IAA3B,EAAiCG,SAAjC,EAA4C;AAClE,MAAIC,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACtC,WAAOH,iBAAiB,CAACG,KAAD,EAAQF,SAAR,CAAxB;AACD,GAFD;;AAIA,SAAOf,CAAC,CAACkB,OAAF,CAAUlB,CAAC,CAACmB,MAAF,CAAS;AACxBC,IAAAA,QAAQ,EAAEpB,CAAC,CAACqB,GAAF,CAAMrB,CAAC,CAACsB,IAAF,CAAOb,QAAP,EAAiBO,QAAjB,CAAN;AADc,GAAT,CAAV,EAEHhB,CAAC,CAACsB,IAAF,CAAOX,gBAAP,EAAyBX,CAAC,CAACkB,OAAF,CAAUlB,CAAC,CAACuB,QAAF,CAAWvB,CAAC,CAACwB,KAAF,CAAQ,OAAR,CAAX,EAA6B,CAACxB,CAAC,CAACuB,QAAF,CAAWrB,WAAW,CAACH,OAAvB,EAAgC,CAACC,CAAC,CAACyB,QAAH,EAAazB,CAAC,CAAC0B,IAAF,CAAO,CAAC,KAAD,EAAQ,OAAR,CAAP,CAAb,EAAuC1B,CAAC,CAAC0B,IAAF,CAAO,CAAC,KAAD,EAAQ,QAAR,CAAP,CAAvC,EAAkE1B,CAAC,CAAC2B,MAAF,CAASZ,SAAT,CAAlE,CAAhC,CAAD,EAA0Hf,CAAC,CAACyB,QAA5H,CAA7B,CAAV,CAAzB,CAFG,EAEuMb,IAFvM,CAAP;AAGD,CARD;;AAUA,IAAIgB,QAAQ,GAAGd,iBAAf;AACAjB,OAAO,CAACE,OAAR,GAAkB6B,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _layoutText = _interopRequireDefault(require(\"../text/layoutText\"));\n\nvar isType = R.propEq('type');\nvar isSvg = isType(P.Svg);\nvar isText = isType(P.Text);\nvar isNotSvg = R.complement(isSvg);\n\nvar shouldLayoutText = function shouldLayoutText(node) {\n  return isText(node) && !node.lines;\n};\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */\n\n\nvar resolveTextLayout = function resolveTextLayout(node, fontStore) {\n  var mapChild = function mapChild(child) {\n    return resolveTextLayout(child, fontStore);\n  };\n\n  return R.compose(R.evolve({\n    children: R.map(R.when(isNotSvg, mapChild))\n  }), R.when(shouldLayoutText, R.compose(R.converge(R.assoc('lines'), [R.converge(_layoutText.default, [R.identity, R.path(['box', 'width']), R.path(['box', 'height']), R.always(fontStore)]), R.identity]))))(node);\n};\n\nvar _default = resolveTextLayout;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}