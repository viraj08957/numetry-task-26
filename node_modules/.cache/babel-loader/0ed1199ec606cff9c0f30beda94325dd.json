{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _attributedString = _interopRequireDefault(require(\"@react-pdf/textkit/lib/attributedString\"));\n\nvar _emoji = require(\"./emoji\");\n\nvar _ignoreChars = _interopRequireDefault(require(\"./ignoreChars\"));\n\nvar _transformText = _interopRequireDefault(require(\"./transformText\"));\n\nvar PREPROCESSORS = [_ignoreChars.default, _emoji.embedEmojis];\nvar isType = R.propEq('type');\nvar isImage = isType(P.Image);\nvar isTextInstance = isType(P.TextInstance);\n/**\n * Get textkit framgents of given node object\n *\n * @param {Object} font store\n * @param {Object} instance node\n * @returns {Array} text fragments\n */\n\nvar getFragments = function getFragments(fontStore, instance) {\n  var _instance$props, _instance$props2;\n\n  if (!instance) return [{\n    string: ''\n  }];\n  var fragments = [];\n  var _instance$style = instance.style,\n      _instance$style$color = _instance$style.color,\n      color = _instance$style$color === void 0 ? 'black' : _instance$style$color,\n      backgroundColor = _instance$style.backgroundColor,\n      _instance$style$fontF = _instance$style.fontFamily,\n      fontFamily = _instance$style$fontF === void 0 ? 'Helvetica' : _instance$style$fontF,\n      fontWeight = _instance$style.fontWeight,\n      fontStyle = _instance$style.fontStyle,\n      _instance$style$fontS = _instance$style.fontSize,\n      fontSize = _instance$style$fontS === void 0 ? 18 : _instance$style$fontS,\n      _instance$style$textA = _instance$style.textAlign,\n      textAlign = _instance$style$textA === void 0 ? 'left' : _instance$style$textA,\n      lineHeight = _instance$style.lineHeight,\n      textDecoration = _instance$style.textDecoration,\n      textDecorationColor = _instance$style.textDecorationColor,\n      textDecorationStyle = _instance$style.textDecorationStyle,\n      textTransform = _instance$style.textTransform,\n      letterSpacing = _instance$style.letterSpacing,\n      textIndent = _instance$style.textIndent,\n      opacity = _instance$style.opacity;\n  var opts = {\n    fontFamily: fontFamily,\n    fontWeight: fontWeight,\n    fontStyle: fontStyle\n  };\n  var obj = fontStore ? fontStore.getFont(opts) : null;\n  var font = obj ? obj.data : fontFamily;\n  var attributes = {\n    font: font,\n    color: color,\n    opacity: opacity,\n    fontSize: fontSize,\n    backgroundColor: backgroundColor,\n    align: textAlign,\n    indent: textIndent,\n    characterSpacing: letterSpacing,\n    strikeStyle: textDecorationStyle,\n    underlineStyle: textDecorationStyle,\n    underline: textDecoration === 'underline',\n    strike: textDecoration === 'line-through',\n    strikeColor: textDecorationColor || color,\n    underlineColor: textDecorationColor || color,\n    link: ((_instance$props = instance.props) === null || _instance$props === void 0 ? void 0 : _instance$props.src) || ((_instance$props2 = instance.props) === null || _instance$props2 === void 0 ? void 0 : _instance$props2.href),\n    lineHeight: lineHeight ? lineHeight * fontSize : null\n  };\n\n  for (var i = 0; i < instance.children.length; i += 1) {\n    var child = instance.children[i];\n\n    if (isImage(child)) {\n      fragments.push({\n        string: String.fromCharCode(0xfffc),\n        attributes: (0, _extends2.default)({}, attributes, {\n          attachment: {\n            width: child.style.width || fontSize,\n            height: child.style.height || fontSize,\n            image: child.image.data\n          }\n        })\n      });\n    } else if (isTextInstance(child)) {\n      fragments.push({\n        string: (0, _transformText.default)(child.value, textTransform),\n        attributes: attributes\n      });\n    } else if (child) {\n      var _fragments;\n\n      (_fragments = fragments).push.apply(_fragments, getFragments(fontStore, child));\n    }\n  }\n\n  for (var _i = 0; _i < PREPROCESSORS.length; _i += 1) {\n    var preprocessor = PREPROCESSORS[_i];\n    fragments = preprocessor(fragments);\n  }\n\n  return fragments;\n};\n/**\n * Get textkit attributed string from text node\n *\n * @param {Object} font store\n * @param {Object} instance node\n * @returns {Object} attributed string\n */\n\n\nvar getAttributedString = function getAttributedString(fontStore, instance) {\n  var fragments = getFragments(fontStore, instance);\n  return _attributedString.default.fromFragments(fragments);\n};\n\nvar _default = R.curryN(2, getAttributedString);\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Viraj/Desktop/task 26/resume-builder/node_modules/@react-pdf/layout/lib/text/getAttributedString.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","exports","__esModule","default","_extends2","R","P","_attributedString","_emoji","_ignoreChars","_transformText","PREPROCESSORS","embedEmojis","isType","propEq","isImage","Image","isTextInstance","TextInstance","getFragments","fontStore","instance","_instance$props","_instance$props2","string","fragments","_instance$style","style","_instance$style$color","color","backgroundColor","_instance$style$fontF","fontFamily","fontWeight","fontStyle","_instance$style$fontS","fontSize","_instance$style$textA","textAlign","lineHeight","textDecoration","textDecorationColor","textDecorationStyle","textTransform","letterSpacing","textIndent","opacity","opts","obj","getFont","font","data","attributes","align","indent","characterSpacing","strikeStyle","underlineStyle","underline","strike","strikeColor","underlineColor","link","props","src","href","i","children","length","child","push","String","fromCharCode","attachment","width","height","image","value","_fragments","apply","_i","preprocessor","getAttributedString","fromFragments","_default","curryN"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar _attributedString = _interopRequireDefault(require(\"@react-pdf/textkit/lib/attributedString\"));\n\nvar _emoji = require(\"./emoji\");\n\nvar _ignoreChars = _interopRequireDefault(require(\"./ignoreChars\"));\n\nvar _transformText = _interopRequireDefault(require(\"./transformText\"));\n\nvar PREPROCESSORS = [_ignoreChars.default, _emoji.embedEmojis];\nvar isType = R.propEq('type');\nvar isImage = isType(P.Image);\nvar isTextInstance = isType(P.TextInstance);\n/**\n * Get textkit framgents of given node object\n *\n * @param {Object} font store\n * @param {Object} instance node\n * @returns {Array} text fragments\n */\n\nvar getFragments = function getFragments(fontStore, instance) {\n  var _instance$props, _instance$props2;\n\n  if (!instance) return [{\n    string: ''\n  }];\n  var fragments = [];\n  var _instance$style = instance.style,\n      _instance$style$color = _instance$style.color,\n      color = _instance$style$color === void 0 ? 'black' : _instance$style$color,\n      backgroundColor = _instance$style.backgroundColor,\n      _instance$style$fontF = _instance$style.fontFamily,\n      fontFamily = _instance$style$fontF === void 0 ? 'Helvetica' : _instance$style$fontF,\n      fontWeight = _instance$style.fontWeight,\n      fontStyle = _instance$style.fontStyle,\n      _instance$style$fontS = _instance$style.fontSize,\n      fontSize = _instance$style$fontS === void 0 ? 18 : _instance$style$fontS,\n      _instance$style$textA = _instance$style.textAlign,\n      textAlign = _instance$style$textA === void 0 ? 'left' : _instance$style$textA,\n      lineHeight = _instance$style.lineHeight,\n      textDecoration = _instance$style.textDecoration,\n      textDecorationColor = _instance$style.textDecorationColor,\n      textDecorationStyle = _instance$style.textDecorationStyle,\n      textTransform = _instance$style.textTransform,\n      letterSpacing = _instance$style.letterSpacing,\n      textIndent = _instance$style.textIndent,\n      opacity = _instance$style.opacity;\n  var opts = {\n    fontFamily: fontFamily,\n    fontWeight: fontWeight,\n    fontStyle: fontStyle\n  };\n  var obj = fontStore ? fontStore.getFont(opts) : null;\n  var font = obj ? obj.data : fontFamily;\n  var attributes = {\n    font: font,\n    color: color,\n    opacity: opacity,\n    fontSize: fontSize,\n    backgroundColor: backgroundColor,\n    align: textAlign,\n    indent: textIndent,\n    characterSpacing: letterSpacing,\n    strikeStyle: textDecorationStyle,\n    underlineStyle: textDecorationStyle,\n    underline: textDecoration === 'underline',\n    strike: textDecoration === 'line-through',\n    strikeColor: textDecorationColor || color,\n    underlineColor: textDecorationColor || color,\n    link: ((_instance$props = instance.props) === null || _instance$props === void 0 ? void 0 : _instance$props.src) || ((_instance$props2 = instance.props) === null || _instance$props2 === void 0 ? void 0 : _instance$props2.href),\n    lineHeight: lineHeight ? lineHeight * fontSize : null\n  };\n\n  for (var i = 0; i < instance.children.length; i += 1) {\n    var child = instance.children[i];\n\n    if (isImage(child)) {\n      fragments.push({\n        string: String.fromCharCode(0xfffc),\n        attributes: (0, _extends2.default)({}, attributes, {\n          attachment: {\n            width: child.style.width || fontSize,\n            height: child.style.height || fontSize,\n            image: child.image.data\n          }\n        })\n      });\n    } else if (isTextInstance(child)) {\n      fragments.push({\n        string: (0, _transformText.default)(child.value, textTransform),\n        attributes: attributes\n      });\n    } else if (child) {\n      var _fragments;\n\n      (_fragments = fragments).push.apply(_fragments, getFragments(fontStore, child));\n    }\n  }\n\n  for (var _i = 0; _i < PREPROCESSORS.length; _i += 1) {\n    var preprocessor = PREPROCESSORS[_i];\n    fragments = preprocessor(fragments);\n  }\n\n  return fragments;\n};\n/**\n * Get textkit attributed string from text node\n *\n * @param {Object} font store\n * @param {Object} instance node\n * @returns {Object} attributed string\n */\n\n\nvar getAttributedString = function getAttributedString(fontStore, instance) {\n  var fragments = getFragments(fontStore, instance);\n  return _attributedString.default.fromFragments(fragments);\n};\n\nvar _default = R.curryN(2, getAttributedString);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}